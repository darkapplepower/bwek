_table = ["쒮", "쪎", "뛢", "푪", "퉯", "쵽", "츉", "떎", "컒", "퍲", "쪦", "퐒", "퇋", "뙍", "췒", "뀳", "퀧", "뺽", "쏈", "퍑", "펷", "컖", "뛠", "캻", "쀍", "쑚", "쓞", "쒅", "쾕", "쵃", "꼀", "컗", "톏", "쳚", "춁", "뜕", "퉱", "폢", "쵊", "쳯", "쫤", "쨚", "퍍", "퉚", "꾢", "쫛", "뿫", "폀", "쫪", "켦", "꾫", "쾙", "꼖", "촱", "뚻", "뺤", "쏅", "퀥", "퐕", "꿳", "껽", "튦", "쵻", "풻", "쭲", "뜛", "꾪", "뜑", "첊", "뛇", "캶", "쬆", "쨹", "쿎", "퀡", "픏", "뗹", "똸", "퇧", "뾂", "뙋", "뺛", "꼆", "쮆", "꽑", "뽦", "툞", "뛃", "툝", "쎫", "꼃", "쪊", "쮻", "튟", "쬶", "뻁", "꾮", "꼚", "폓", "껿", "쬹", "퍊", "꾦", "켫", "쐢", "뀴", "퓺", "꿝", "쓝", "턊", "촭", "껷", "톿", "퓴", "첇", "콼", "풵", "턦", "췖", "쿍", "톑", "쪩", "턟", "쿿", "춄", "켪", "쒉", "꾧", "턗", "꽎", "뺡", "쫥", "풝", "뺿", "쫾", "쒏", "쪯", "뽫", "첈", "캯", "챿", "쬾", "껺", "톎", "쵒", "챣", "꽪", "꽚", "폙", "꺭", "뽥", "쿊", "땷", "폚", "쭭", "쳶", "튡", "폝", "땫", "퐪", "컔", "쳙", "꽩", "퐶", "쐓", "떇", "쪖", "썑", "퐑", "뿴", "츎", "쀐", "쳕", "퐎", "챬", "쀖", "톉", "꽲", "퉔", "퉕", "쨡", "쐖", "텵", "톖", "촳", "뛡", "큢", "폶", "뻂", "첂", "꼓", "뀵", "쓚", "뼰", "쑎", "쪑", "쀑", "캺", "꽧", "쿐", "뾇", "췘", "꿹", "툜", "풠", "쮽", "캱", "퍇", "툀", "툓", "쐝", "쳺", "꺲", "쮏", "꿣", "펽", "켮", "쨣", "뙗", "쏷", "뽪", "툚", "뾺", "퍎", "쐀", "턡", "꿶", "꿾", "풶", "꿠", "뼩", "쵏", "꺎", "뗝", "뗣", "쁂", "쨳", "퐯", "춿", "퇦", "꺩", "뼗", "똹", "쐚", "퓶", "쎲", "쁎", "쐂", "튧", "뽧", "춳", "푮", "풞", "춅", "쒨", "폾", "쑖", "캲", "쓙", "쳸", "챲", "튥", "켟", "꺯", "뀺", "퇢", "쏇", "쪪", "쮾", "춶", "췙", "퉎", "뾅", "꼝", "쏁", "펺", "톒", "풡", "쿒", "큕", "폆", "뼪", "툙", "챦", "푩", "퓗", "뽟", "촧", "쀓", "꼕", "쏊", "뺺", "뾽", "쐁", "땲", "퀋", "쌳", "쓗", "퓳", "똂", "쿉", "쪣", "궭", "쪲", "쒡", "턆", "퉖", "턅", "뜚", "꽱", "쀊", "쭧", "뛄", "꾡", "튫", "똃", "첅", "쏿", "뾾", "쳓", "폃", "땴", "뿶", "썚", "퇆", "뽨", "푥", "춊", "컎", "뗢", "꿚", "쀇", "뙎", "퓱", "챪", "촶", "꿼", "뼚", "뚋", "펣", "뗡", "뺝", "퇉", "푫", "퐳", "뗷", "폖", "춾", "촲", "쒧", "퀝", "퀁", "퉍", "똆", "꿞", "콇", "쾒", "툛", "퍮", "쏾", "퐲", "쀎", "뛚", "퉗", "퍩", "쒊", "뙖", "푡", "쬃", "퐩", "퐚", "퇇", "퍒", "퍯", "똾", "꾥", "텷", "쵎", "캸", "뚏", "꼢", "쫢", "뛙", "홹", "쏽", "펹", "뾊", "꿵", "떒", "퍥", "똵", "텮", "퇛", "썘", "꺒", "뿳", "큞", "뗥", "뾵", "턢", "뛦", "뚒", "퇎", "뾼", "턃", "똻", "퍪", "쨗", "뼭", "쐕", "뀂", "큛", "쩂", "쏋", "뚎", "촩", "뿂", "퍓", "뼳", "쁉", "꾟", "뼎", "쒟", "쒆", "뚃", "쁋", "꼞", "퀦", "퓵", "첋", "푨", "콽", "큙", "퇡", "퇈", "츒", "쐞", "똠", "뚊", "퉰", "뗧", "뼯", "꼂", "뺥", "꿿", "쭮", "펿", "쌽", "뛂", "뜒", "쨟", "뀷", "뼓", "뀭", "첆", "쮅", "쳛", "똲", "쌻", "퀎", "퐱", "텭", "탻", "풗", "퉲", "뉇", "쳱", "퀞", "쮃", "퐭", "쾏", "쨻", "콂", "쐆", "쒪", "쨼", "뀫", "픮", "컚", "퐔", "쬱", "콳", "쬸", "꺏", "쁊", "쾗", "쾑", "꺇", "쬵", "썛", "쎪", "콹", "쁆", "뗽", "퍉", "쐛", "츊", "쉙", "폁", "쎦", "꽖", "뽢", "츓", "쵋", "쪍", "쵅", "풦", "뿺", "뙓", "텱", "땮", "꺣","쓟", "쪭", "첁", "꺮", "쭶", "쭱", "쿇", "쓡", "쨢", "쫽", "떐", "뱕", "쬷", "뿲", "똶", "콊", "뀶", "퇥", "뾳", "쨙", "벊", "쒫", "쵆", "퍬", "쯅", "쾘", "톓", "뽽", "쫣", "튩", "쯄", "턝", "쫦", "퇤", "큟", "쳷", "쳟", "꺊", "쑔", "쯁", "켢", "쏆", "콶", "풚", "뛁", "퓏", "쳾", "펈", "켨", "쮌", "턠", "뾃", "퀢", "뿮", "꽕", "퉭", "풿", "쒍", "콻", "쑗", "쨾", "쳢", "쮒", "턞", "뜏", "퉳", "챭", "쁁", "꺉", "쒦", "꽓", "챫", "쪒", "쫞", "쁈", "꿙", "쫺", "뗦", "뼍", "콅", "쾛", "쳵", "떍", "콵", "큜", "뗿", "쑒", "뛟", "쫝", "꽭", "쌶", "콁", "뜖", "꽗", "쨵", "컋", "뺪", "쒒", "꿡", "푦", "챥", "퍦", "춼", "뿱", "턇", "쑓", "뺜", "쾂", "뺾", "쀿", "뾶", "퐓", "뚅", "꽮", "켽", "춆", "쁇", "꼁", "켾", "콄", "쪉", "쌼", "꽰", "퀊", "똁", "쨿", "퓂", "퉓", "쬂", "콆", "쑋", "쮋", "쐟", "퐖", "팏", "뺦", "퇞", "뼱", "뙚", "퓫", "콿", "쳞", "턙", "큚", "뛆", "꽶", "퀛", "뀮", "퀇", "춽", "풹", "뺣", "췕", "퐋", "뛣", "쀏", "뼒", "쵉", "퀪", "텫", "뼕", "폕", "뼔", "쨽", "퍏", "뽮", "꿗", "퇣", "켻", "츇", "꿺", "츑", "켩", "쪬", "뽾", "춂", "썏", "뼖", "츍", "풳", "똷", "큓", "퉑", "쑍", "쨞", "쯃", "뒗", "쮊", "퓭", "턄", "쬀", "땭", "췑", "뗤", "쨠", "퐍", "뜘", "꺓", "꽍", "첎", "텴", "캷", "퉮", "폜", "풽", "쌾", "꿽", "슒", "팚", "퀅", "껾", "쨺", "쑕", "꼙", "켥", "푋", "푢", "꺖", "뗺", "풾", "쏉", "컑", "퇝", "췏", "떓", "퍫", "썞", "쎬", "퍭", "퍣", "뼲", "쏺", "쓢", "꼜", "꿦", "쐜", "쯇", "쳜", "뼋", "텳", "뗛", "퇂", "턂", "춻", "쁅", "폂", "푾", "쭯", "뾁", "츏", "츖", "떉", "퉩", "뺧", "핁", "탾", "퇪", "쑑", "꼛", "뻆", "퉶", "쪏", "췛", "챮", "쏹", "쿓", "뼮", "쎭", "큖", "툢", "퇅", "뻃", "쿖", "뛗", "켡", "댥", "쫧", "춺", "퀤", "촰", "톊", "튢", "뚽", "껹", "썒", "뿭", "쓠", "퐮", "뿷", "쨝", "쳹", "풟", "꽋", "똺", "쏎", "팲", "쾖", "뙔", "쀯", "쏂", "쒎", "쒩", "쎩", "툕", "텲", "쪓", "춃", "퀈", "쯂", "톍", "쭩", "꺍", "썂", "뼧", "땱", "픬", "뾄", "꾨", "쪮", "꿢", "떑", "퀆", "쀒", "콾", "쳝", "푚", "텶", "쿑", "탽", "폛", "퇊", "뼑", "팫", "뜗", "칅", "튪", "쫷", "췗", "쎥", "첉", "퀉", "퓲", "컓", "푧", "뺷", "쭪", "뻀", "풢", "꺦", "뾿", "턁", "쒋", "썖", "꼟", "춹", "폞", "쯆", "쬁", "퐰", "꺪", "풺", "쵍", "꿟", "쒥", "뛝", "쒌", "톐", "쐙", "췚", "뜙", "픓", "쳻", "쬯", "촪", "츐", "쾚", "뽩", "쮉", "뽡", "쬺", "쾱", "쯊", "쵌", "뙑", "땺", "꺫", "쓣", "똀", "쪇", "쮎", "쫿", "퉧", "뾻", "쬲", "퉋", "큝", "캹", "떖", "쒃", "캵", "뛊", "쌺", "쿏", "쎿", "펾", "폟", "콣", "쒢", "쪐", "뛅", "뗾", "컍", "켧", "썕", "캾", "턣", "풣", "땵", "쨦", "췂", "쎮", "뾆", "꽯", "튮", "쨶", "쎣", "쫹", "꿻", "꽒", "쎯", "쬻", "쪫", "쓦", "뜞", "떊", "꽳", "푟", "챯", "떏", "쀉", "쌿", "퍖", "똯", "뚾", "뺞", "풙", "쫡", "꽔", "폹", "쳖", "퉒", "쭳", "쮍", "뚆", "쐃", "툖", "춵", "퍐", "꺬", "꺐", "뺹", "퓷", "썙", "쵾", "턚", "퇁", "쌹", "췞", "퀣", "퐧", "땳", "퓮", "퐗", "뀲", "똱", "툟", "뚌", "썗", "꺑", "쳲", "쭰", "꾩", "쪥", "톇", "뗪", "콺", "꺥", "쌵", "텺", "뛞", "뿵", "땶", "뽻", "풼", "춇", "컕", "뙕", "챩", "쾞", "퉪", "뼶", "튨", "뀱", "뙒", "콃", "뺢", "촮", "뚉", "촯", "뚍", "퀂", "뾹", "뗞"]
def _encodeByteString(string):
    x = bytearray(string.encode("utf-8"))
    x = list(map(lambda y: format(y, "b").rjust(8, "0"), x))
    return "".join(x)
def _encodeBase64(byteString):
    string = _slice10(byteString)
    result = ""
    for i in range(0, len(string), 4):
        for ii in range(4):
            if i + ii < len(string):
                result += _table[int(string[i + ii], 2)]
            else:
                result += _table[1024]
    return result
def _slice10(string):
    result=[]
    last=0
    for i in range(10, len(string)+10 if len(string)%10 else len(string), 10):
        result.append(string[last:i].ljust(10, "0"))
        last=i
    return result
def _slice8(string):
    result=[]
    last=0
    for i in range(8, len(string)+8 if len(string)%8 else len(string), 8):
        result.append(string[last:i])
        last=i
    return result
def _decodeByte(bArray):
    result = []
    task = [None for i in range(4)]
    while True:
        if not len(bArray):
            break
        task[0] = bArray.pop(0)
        if task[0][0]=="0":
            result.append(chr(int(task[0], 2)))
        elif task[0].startswith("110"):
            task[0] = task[0][3:]
            task[1] = bArray.pop(0)[2:]
            result.append(chr(int(task[0] + task[1], 2)))
        elif task[0].startswith("1110"):
            task[0] = task[0][4:]
            task[1] = bArray.pop(0)[2:]
            task[2] = bArray.pop(0)[2:]
            result.append(chr(int(task[0] + task[1] + task[2], 2)))
        elif task[0].startswith("11110"):
            task[0] = task[0][5:]
            task[1] = bArray.pop(0)[2:]
            task[2] = bArray.pop(0)[2:]
            task[3] = bArray.pop(0)[2:]
            result.append(chr(int(task[0] + task[1] + task[2] + task[3], 2)))
        else:
            raise Exception('wtf')
    return "".join(result)
def _Base64toByte(string):
    result=""
    string=list(string)
    for i in string:
        ii=_table.index(i)
        ii=format(ii, "b")
        if len(ii)!=11:
            result+=ii.rjust(10, "0")
    return result
def str2bwek(string):
    return _encodeBase64(_encodeByteString(string))
def bwek2str(string):
    return _decodeByte(_slice8(_Base64toByte(string)))
if __name__=="__main__":
        inp=None
        while inp!="0":
                inp=input("한국어->뷁어는 1, 뷁어->한국어는 2, 종료는 0을 입력해주세요\n")
                if inp=="1":
                        inp2=input("뷁어로 변환할 문자를 입력해주세요\n")
                        print(str2bwek(inp2))
                elif inp=="2":
                        inp2=input("한국어로 변환할 뷁어를 입력해주세요\n")
                        try:
                                print(bwek2str(inp2))
                        except:
                                print("문제가 발생했습니다. 제대로 된 뷁어를 입력해주세요")